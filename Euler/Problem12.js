/*
     Problem from Site

     The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?

*/

var common = require("./common");
var colors = require('colors/safe');
const _progress = require('cli-progress');

function findTriangles(number = 500000) {

    var triangles = [];
    var lastValue = 0;

    for (i = 1; i < number + 1; i++) {
        var currentValue = i + lastValue;

        triangles.push(currentValue);

        lastValue = currentValue;
    }

    return triangles;

}

function findOccurancesOfNumbersInArray(array) {
    var tracker = [];

    function getFromTracker(number) {

        var foundIdex = -1;

        tracker.forEach((element, index) => {
            if (element.number == number) foundIdex = index;
        });

        return foundIdex;
    }

    for (var i = 0; i < array.length; i++) {
        var current = array[i];

        var foundIndex = getFromTracker(current);

        if (foundIndex != -1) {
            tracker[foundIndex].count++;
        } else {
            tracker.push({
                count: 1,
                number: current
            });
        }
    }

    var occurances = [];

    tracker.forEach(element => {
        occurances.push(element.count);
    });

    return occurances;
}

function countFactorsForNumber(number) {

    var primeFactors = common.getPrimeFactors(number);

    //console.log(`PrimeFactors ${primeFactors}`);

    var occurances = findOccurancesOfNumbersInArray(primeFactors);

    for (var i = 0; i < occurances.length; i++) {
        occurances[i]++;
    }

    var productOfOccurances = common.productOfArray(occurances);

    //console.log(`For ${number} has ${productOfOccurances} factors`);

    return productOfOccurances;
}

module.exports = {
    solveProblem: async function () {

        console.log('Finding Triangles');

        var triangles = findTriangles();

        console.log(`Done finding Triangles := ${triangles.length}`);

        var progressBar = new _progress.Bar({
            // barCompleteChar: '+',
            // barIncompleteChar: ' ',
            // fps: 5,
            // stream: process.stdout,
            barsize: 65
        }, _progress.Presets.shades_grey);

        progressBar.start(triangles.length, 0);

        var loops = 0;

        for (var i = triangles.length - 1; i > -1; i--) {
            loops++;

            var current = triangles[i];

            var factorCount = countFactorsForNumber(current);

            if (factorCount == 500) {
                console.log(colors.green(`Found ${current} has ${factorCount} factors`));

                progressBar.stop();

                return;
            }

            progressBar.update(loops);

        }

        progressBar.stop();

        // for (var i = 100000; i < triangles.length; i++) {
        //     var current = triangles[i];

        //     //var factors = common.getFactors(current);

        //     if (factors.length == 499) {
        //         console.log(`Triangle ${current} has ${factors.length} factors`);

        //         console.log("Exiting . . .");

        //         return;
        //     }
        // }
    }
}