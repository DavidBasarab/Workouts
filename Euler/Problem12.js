/*
     Problem from Site

     The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?

*/

var common = require("./common");
var colors = require('colors/safe');

function findCombination(array) {

    console.log(`Finding Combinations of ${array}`);

    var first = array[0];

    array.splice(0, 1);

    console.log(`First Item = ${first} | splice := ${array}`);

    var combos = [];

    for (var i = 0; i < array.length; i++) {
        var value = first * array[i]

        console.log(colors.green(`Adding to combos ${first} * ${array[i]} := ${value}`));

        combos.push(value);
    }

    console.log(colors.cyan(`Combos before Recursive ${combos}`));

    if (array.length > 1) {
        var recursiveCall = findCombination(array);

        console.log(colors.yellow(`recursiveCall = ${recursiveCall} | combo := ${combos}`));

        combos = combos.concat(recursiveCall);
    }

    console.log(`Returing combination ${combos}`);

    return combos;

}

module.exports = {
    solveProblem: async function () {
        var temp = [];

        temp.push(17);
        temp.push(23);
        temp.push(17);
        temp.push(10);

        console.log(`temp := ${temp}`);

        var secondArray = [];

        secondArray.push(1);
        secondArray.push(2);
        secondArray.push(3);
        secondArray.push(10);

        var final = temp.concat(secondArray);
        
        console.log(`temp := ${temp} | After ${secondArray} | ${final}`);

        var number = 20;

        var primeFactors = common.getPrimeFactors(number);

        console.log(`PrimeFactors for ${number} is ${primeFactors}`);

        var factors = [];

        factors.push(1);

        primeFactors.forEach(element => {
            factors.push(element);
        });

        var primeCobinations = findCombination(primeFactors);

        console.log(`PrimeCombinations := ${primeCobinations}`);

    }
}